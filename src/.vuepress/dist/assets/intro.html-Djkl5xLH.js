import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,o as n,b as i,a as e,d as a}from"./app-D4Mw9Ixn.js";const o="/blog/assets/OMP_DO-CutKbO7f.png",s={},l=i(`<h2 id="two-familers-of-parallel-machines" tabindex="-1"><a class="header-anchor" href="#two-familers-of-parallel-machines"><span>Two familers of parallel machines</span></a></h2><h3 id="shared-memory-architecture" tabindex="-1"><a class="header-anchor" href="#shared-memory-architecture"><span>Shared-memory architecture</span></a></h3><p>These parallel machines are build up on a set of processors which have access to a common memory. Usually the name of <strong>SMP machines</strong> is used for computers based on this architecture, where SMP stands for <strong>Symmetric Multi Processing</strong>.</p><h3 id="distributed-memory-architecture" tabindex="-1"><a class="header-anchor" href="#distributed-memory-architecture"><span>Distributed-memory architecture</span></a></h3><p>In these parallel machines each processor has its own private memory and information is interchanged between the processors through messages. The name of <strong>clusters</strong> is commonly used for this type of computing devices.</p><h3 id="openmp" tabindex="-1"><a class="header-anchor" href="#openmp"><span>OpenMP</span></a></h3><p>A new industry standard has been created with the aim to serve as a good basis for the development of parallel programs on <strong>shared-memory machines</strong>.</p><h2 id="open-the-directives-of-openmp-and-conditional-compliation" tabindex="-1"><a class="header-anchor" href="#open-the-directives-of-openmp-and-conditional-compliation"><span>Open the directives of OpenMP and conditional compliation</span></a></h2><div class="language-Fortran line-numbers-mode" data-ext="Fortran" data-title="Fortran"><pre class="language-Fortran"><code>!$OMP

!$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>!$OMP</code>: The OpenMP-compliant compiler knows that the following information in the line is an OpenMP directive.</p><p><code>!$</code>: The corresponding line is said to be affected by a <strong>conditional compilation</strong>. When execution start, these two characters <code>!</code> and <code>$</code> will be replaced by two white spaces so that the compiler is taking into account the line</p><h2 id="parallel-regions" tabindex="-1"><a class="header-anchor" href="#parallel-regions"><span>Parallel regions</span></a></h2><div class="language-Fortran line-numbers-mode" data-ext="Fortran" data-title="Fortran"><pre class="language-Fortran"><code>!$OMP PARALLEL

!$OMP END PARALLEL
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="openmp-constructs" tabindex="-1"><a class="header-anchor" href="#openmp-constructs"><span>OpenMP constructs</span></a></h2><div class="language-Fortran line-numbers-mode" data-ext="Fortran" data-title="Fortran"><pre class="language-Fortran"><code>!$OMP DO 
    do i = 1, 1000 
    ...
    enddo 
!$OMP END DO
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),c=e("figure",null,[e("img",{src:o,alt:"Graphical representation of the example explaining the general working principle of the !OMP END DO directive-pair",tabindex:"0",loading:"lazy"}),e("figcaption",null,[a("Graphical representation of the example explaining the general working principle of the !"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"O"),e("mi",null,"M"),e("mi",null,"P"),e("mi",null,"D"),e("mi",null,"O"),e("mi",{mathvariant:"normal"},"/"),e("mo",{stretchy:"false"},"!")]),e("annotation",{encoding:"application/x-tex"},"OMP DO/!")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"OMP"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),e("span",{class:"mord"},"/"),e("span",{class:"mclose"},"!")])])]),a("OMP END DO directive-pair")])],-1),m=[l,c];function p(d,h){return n(),r("div",null,m)}const f=t(s,[["render",p],["__file","intro.html.vue"]]),v=JSON.parse(`{"path":"/posts/HPC/OpenMP/intro.html","title":"Baisc knowlodges of parallel computing","lang":"zh-CN","frontmatter":{"title":"Baisc knowlodges of parallel computing","icon":"file","order":3,"author":"Krigo","category":["HPC"],"tag":["Parallel Computing"],"footer":"Thank's myself","copyrigh":"无版权","date":"2024-05-08T00:00:00.000Z","description":"Two familers of parallel machines Shared-memory architecture These parallel machines are build up on a set of processors which have access to a common memory. Usually the name o...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/HPC/OpenMP/intro.html"}],["meta",{"property":"og:site_name","content":"Krigo's 博客"}],["meta",{"property":"og:title","content":"Baisc knowlodges of parallel computing"}],["meta",{"property":"og:description","content":"Two familers of parallel machines Shared-memory architecture These parallel machines are build up on a set of processors which have access to a common memory. Usually the name o..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-24T15:52:20.000Z"}],["meta",{"property":"article:author","content":"Krigo"}],["meta",{"property":"article:tag","content":"Parallel Computing"}],["meta",{"property":"article:published_time","content":"2024-05-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-24T15:52:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Baisc knowlodges of parallel computing\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-24T15:52:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Krigo\\"}]}"]]},"headers":[{"level":2,"title":"Two familers of parallel machines","slug":"two-familers-of-parallel-machines","link":"#two-familers-of-parallel-machines","children":[{"level":3,"title":"Shared-memory architecture","slug":"shared-memory-architecture","link":"#shared-memory-architecture","children":[]},{"level":3,"title":"Distributed-memory architecture","slug":"distributed-memory-architecture","link":"#distributed-memory-architecture","children":[]},{"level":3,"title":"OpenMP","slug":"openmp","link":"#openmp","children":[]}]},{"level":2,"title":"Open the directives of OpenMP and conditional compliation","slug":"open-the-directives-of-openmp-and-conditional-compliation","link":"#open-the-directives-of-openmp-and-conditional-compliation","children":[]},{"level":2,"title":"Parallel regions","slug":"parallel-regions","link":"#parallel-regions","children":[]},{"level":2,"title":"OpenMP constructs","slug":"openmp-constructs","link":"#openmp-constructs","children":[]}],"git":{"createdTime":1714977827000,"updatedTime":1716565940000,"contributors":[{"name":"Krigo","email":"14226817+krigo@user.noreply.gitee.com","commits":2}]},"readingTime":{"minutes":0.82,"words":247},"filePathRelative":"posts/HPC/OpenMP/intro.md","localizedDate":"2024年5月8日","excerpt":"<h2>Two familers of parallel machines</h2>\\n<h3>Shared-memory architecture</h3>\\n<p>These parallel machines are build up on a set of processors which have access to a common memory. Usually the name of <strong>SMP machines</strong> is used for computers based on this architecture, where SMP stands for <strong>Symmetric Multi Processing</strong>.</p>","autoDesc":true}`);export{f as comp,v as data};
